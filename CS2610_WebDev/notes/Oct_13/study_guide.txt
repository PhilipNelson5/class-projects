CS 2610 - Fri Oct 13

   ___                  ___   ___ _           _         ___      _    _     
  | __|_ ____ _ _ __   |_  ) / __| |_ _  _ __| |_  _   / __|_  _(_)__| |___ 
  | _|\ \ / _` | '  \   / /  \__ \  _| || / _` | || | | (_ | || | / _` / -_)
  |___/_\_\__,_|_|_|_| /___| |___/\__|\_,_\__,_|\_, |  \___|\_,_|_\__,_\___|
                                                |__/                        

 ____  __    ____  _  _  ____   __  _  _ 
(  __)(  )  (  __)( \/ )(  _ \ /  \( \/ )
 ) _) / (_/\ ) _)  )  (  ) _ ((  O ))  ( 
(__)  \____/(____)(_/\_)(____/ \__/(_/\_)

https://css-tricks.com/snippets/css/a-guide-to-flexbox/

What are the pros of tables as a layout strategy?
    Easy concept to understand
    Size is handled for you
    Works great when your data is naturally tabular

What are the cons of tables as a layout strategy?
    Tedious to write and maintain
    Difficult to achieve certain visual effects
    
What are the advantages of Flexbox as a layout strategy?
    Leaves precise details up to the browser; lets the author be lazy
    Reactive - website automatically adjusts to fit the user-agent's viewport

What's the difference between Flexbox parents and children?
    Each parent may contain one or more children
    Some Flexbox properties apply only to parent or child
    Flexbox children may themselves be parents to elements they contain

Which property makes an element a Flexbox parent?
    display: flex;

Which CSS properties relate to Flexbox parents?
    We studied the following:
        display: flex;
        flex-direction: row | row-reverse | column | column-reverse;
        flex-wrap: nowrap | wrap | wrap-reverse;
        flex-flow: <‘flex-direction’> || <‘flex-wrap’>

Which CSS properties relate to Flexbox children?
    We studied the following:
        order: <integer>; 
        flex-grow: <number>;
        flex-shrink: <number>;
        flex-basis: <length> | auto; 
        flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ];

How do you control the size of Flexbox children?
    Broadly speaking, this is a combination of the effects of the flex-grow,
    flex-shrink and flex-basis properties.
    In its most simple form, you can specify a relative size of child elements
    with the following:
        flex: <integer>; 

How do you control the position of Flexbox children?
    By default, child elements are positioned within their container according
    to the order in which they appear in the source code.
    This may be overridden by using the
        order: <integer>;
    property on children.
    
    The direction in which they are laid out is determined on the parent, and
    may be adjusted by the flex-direction, flex-wrap, and/or flex-flow
    properties.


  ___  __  ____ 
 / __)(  )(_  _)
( (_ \ )(   )(  
 \___/(__) (__) 

What is a branch in git?
    A line of development with its own name. The branch's name refers to the
    commit which is the ultimate commit along a line of development; this name
    moves along the branch such that it always refers to the latest point in
    time along that line. This is in contrast to a tag which always refers to
    the same commit, even as new commits are added later.

What can you do with branches in git?
    You can switch between branches, which allows you to maintain parallel
    versions of code. You might do this to experiment with risky changes
    without jeopardizing your codebase.
    You can merge branches, which lets you keep the results of successful
    expirements.
    You can delete branches, allowing you to safely discard developmental dead
    ends.

How do you create a branch in git?
    git checkout -b <branch_name>

How do you switch between branches in git?
    git checkout <branch_name>

How do you list branches in git?
    git show-branch
    git branch

How do you merge branches in git?
    To merge a branch called 'experiment' into your current branch, you run
    git merge experiment

 ____   __    ___  _  _  _  _  ____  __ _  ____ 
(    \ /  \  / __)/ )( \( \/ )(  __)(  ( \(_  _)
 ) D ((  O )( (__ ) \/ (/ \/ \ ) _) /    /  )(  
(____/ \__/  \___)\____/\_)(_/(____)\_)__) (__) 
 ____  ____  ____  _  _   ___  ____  _  _  ____  ____ 
/ ___)(_  _)(  _ \/ )( \ / __)(_  _)/ )( \(  _ \(  __)
\___ \  )(   )   /) \/ (( (__   )(  ) \/ ( )   / ) _) 
(____/ (__) (__\_)\____/ \___) (__) \____/(__\_)(____)

../Sep_27/notes.txt

HTML5 introduces new elements which allow us to describe the structure of our
document:

<header>
<nav>
<main>
	<article>
		<section>
	<aside>
<footer>

By themselves these elements don't have an appearance of their own. But we can
apply styles through CSS, as well as contain other content within them.

For example, we can define borders, padding, margins and backgrounds to these
otherwise invisible elements.

A background-image may be a file such as a PNG or JPG, may be a solid color,
or a gradient pattern defined in CSS and rendered by the browser. Images may
be stacked atop each other, as well as atop a gradient. As we saw in class in
the Chrome browser, a linear gradient itself may be transparent.

 _  _  ____  _  _  __      ____  __  ____  _  _  ____ 
/ )( \(_  _)( \/ )(  )    (  __)/  \(  _ \( \/ )/ ___)
) __ (  )(  / \/ \/ (_/\   ) _)(  O ))   // \/ \\___ \
\_)(_/ (__) \_)(_/\____/  (__)  \__/(__\_)\_)(_/(____/

../Sep_29/notes.txt
../Oct_04/notes.txt


 _  _  ____  ____  ____  
/ )( \(_  _)(_  _)(  _ \ 
) __ (  )(    )(   ) __/ 
\_)(_/ (__)  (__) (__)   ../Oct_06/notes.txt


 ____  _  _  ____  _  _   __   __ _ 
(  _ \( \/ )(_  _)/ )( \ /  \ (  ( \
 ) __/ )  /   )(  ) __ ((  O )/    / ../Oct_09/notes.txt
(__)  (__/   (__) \_)(_/ \__/ \_)__) ../Oct_11/notes.py


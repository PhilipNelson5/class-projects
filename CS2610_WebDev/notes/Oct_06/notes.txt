CS 2610 - Fri Oct 6

Question of the day: How does the HTTP work?


             _  _ _____ _____ ___   ___         _               _ 
            | || |_   _|_   _| _ \ | _ \_ _ ___| |_ ___  __ ___| |
            | __ | | |   | | |  _/ |  _/ '_/ _ \  _/ _ \/ _/ _ \ |
            |_||_| |_|   |_| |_|   |_| |_| \___/\__\___/\__\___/_|
                                                                  
                       ___                  _            
                      / _ \__ _____ _ ___ _(_)_____ __ __
                     | (_) \ V / -_) '_\ V / / -_) V  V /
                      \___/ \_/\___|_|  \_/|_\___|\_/\_/ 
                                                         

https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview

As far as protocols go, HTTP is very simple.

It isn't comprehensive, and leaves lots of details to the other protocols it
"rides on top of".

It therefore doesn't need to specify much in the way of addressing, hostname
to address resolution, connection negotiation and maintenance, as these
details are handled by lower-level protocols such as ICMP, IP, DNS and TCP.

HTTP consists of human-readable plain text as opposed to being expressed as
binary - a feature it enjoys by being situated at the top of the protocol
hierarchy.

HTTP is extensible through it's acceptance of a wide variety of headers.  The
protocol works when user-agents (browsers, mostly) and servers agree upon what
a particular header means. But when an unrecognized header is presented to a
user-agent, it ignores it instead of responding with an error condition. This
makes it easy to augment the standard by adding new features to the protocol
later on.


 _  _ _____ _____ ___                _                    _        
| || |_   _|_   _| _ \  __ _ _ _  __| |  _ __ _ _ _____ _(_)___ ___
| __ | | |   | | |  _/ / _` | ' \/ _` | | '_ \ '_/ _ \ \ / / -_|_-<
|_||_| |_|   |_| |_|   \__,_|_||_\__,_| | .__/_| \___/_\_\_\___/__/
                                        |_|                        

There can be servers in between your user-agent and the HTTP server you wish
to talk to. These "proxy" servers fill many important roles including:

	* Shield resouces from the internet
	* Distributing traffic fairly among servers
	* Content Distribution Networks (CDN)
	* Hiding your identity online

 _  _ _____ _____ ___   ___          _            
| || |_   _|_   _| _ \ / __|_  _ _ _| |_ __ ___ __
| __ | | |   | | |  _/ \__ \ || | ' \  _/ _` \ \ /
|_||_| |_|   |_| |_|   |___/\_, |_||_\__\__,_/_\_\
                            |__/                  

HTTP request messages begin with a block of headers in the form of

METHOD PATH VERSION
Header0: value0
Header1: value1
...
<blank line>
Content data follows...


HTTP responses look like this:
VERSION STATUS_CODE STATUS_MESSAGE
Header0: value0
Header1: value1
...
<blank line>
Content data follows...


 _  _ _____ _____ ___   ___                     _   _       
| || |_   _|_   _| _ \ / __| ___ _ __  __ _ _ _| |_(_)__ ___
| __ | | |   | | |  _/ \__ \/ -_) '  \/ _` | ' \  _| / _(_-<
|_||_| |_|   |_| |_|   |___/\___|_|_|_\__,_|_||_\__|_\__/__/
                                                            
                                                      
HTTP headers allow the client and the server to pass additional information
with the request or the response.

A request header consists of its case-insensitive name followed by a colon ':',
then by its value (without line breaks).

Leading white space before the value is ignored.

HTTP Header Reference:
	https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers


 ___                     _            _     _                _            
|_ _|_ __  _ __  ___ _ _| |_ __ _ _ _| |_  | |_  ___ __ _ __| |___ _ _ ___
 | || '  \| '_ \/ _ \ '_|  _/ _` | ' \  _| | ' \/ -_) _` / _` / -_) '_(_-<
|___|_|_|_| .__/\___/_|  \__\__,_|_||_\__| |_||_\___\__,_\__,_\___|_| /__/
          |_|                                                             

Cache-Control
-------------
	The Cache-Control general-header field is used to specify directives for
	caching mechanisms in both, requests and responses.

	Cache-Control: no-cache
	Cache-Control: max-age=600

Connection
----------
	The Connection general header controls whether or not the network
	connection stays open after the current transaction finishes.

	Connection: keep-alive
	Connection: close

Accept
------
	The Accept request HTTP header advertises which content types, expressed as
	MIME types, the client is able to understand.

	Accept: text/html, text/plain, application/octet-stream
	Accept: image/jpeg, image/png
	Accept: image/*
	Accept: */*

Set-Cookie
----------
	The Set-Cookie HTTP response header is used to send cookies from the server
	to the user agent.

	How long this cookie is to be retained by the user-agent may be specified

	Set-Cookie: Hungry_For_Apples=no
	Set-Cookie: Whats_Up=My_Glip_Glops; Max-Age: 600
	Set-Cookie: South_Park=Already_Did_It; Date: Wed, 02 Oct 2013 17:01:03 GMT;

	The Max-Age directive is expressed in seconds
	The Date directive is a date FROM THE POINT OF VIEW OF YOUR PC!

Cookie
------
	The Cookie HTTP request header contains stored HTTP cookies previously sent
	by the server with the Set-Cookie header.

	This header takes a list of name=value pairs. Pairs in the list are
	separated by a semi-colon and a space ('; ').

	Cookie: chocolate=chip; yummy=true; 

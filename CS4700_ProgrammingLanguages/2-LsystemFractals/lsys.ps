%!PS

/inch {72 mul} def
/inc {size add /size exch def} def
/col { 255 div } def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Koch Curve                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/kochDraw
{
  /c exch def
  c (F) eq
  {
    len 0 rlineto
  } if

  c (-) eq
{ -90 rotate } if

c (+) eq
  { 90 rotate } if
} def

/kochRules
{
  /c exch def
  c (F) eq {
    (F)(+)(F)(-)(F)(-)(F)(+)(F)
    8 inc
    size 9 roll
  } if

  c (-) eq
  {
    (-)
    size 1 roll
  } if

  c (+) eq
  {
    (+)
    size 1 roll
  } if
} def

/koch
{
  /len exch def
  /it exch def
  (F)
  1 inc
  0 1 it 
  {
    pop
  0 1 size 1 sub { pop kochRules } for
} for 

0 1 size 1 sub
{
  pop
  kochDraw
} for
stroke
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                          Sierpinski Triangle Curve                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/sierpCurveDraw
{
  /c exch def
  c (A) eq
  { len 0 rlineto } if

c (B) eq
  { len 0 rlineto } if

  c (-) eq
{ -60 rotate } if

c (+) eq
  { 60 rotate } if

} def

/sierpCurveRules
{
  /c exch def
  c (A) eq
  {
    (B)(-)(A)(-)(B)
    4 inc
    size 5 roll
  } if

  c (B) eq
  {
    (A)(+)(B)(+)(A)
    4 inc
    size 5 roll
  } if

  c (-) eq
  { (-) size 1 roll } if

  c (+) eq
  { (+) size 1 roll } if
} def

/sierpinski
{
  /len exch def
  /it exch def
  (A)
  1 inc
  0 1 it 
  {
    pop
    0 1 size 1 sub { pop sierpCurveRules } for
  } for 

  0 1 size 1 sub
  {
    pop
    sierpCurveDraw
  } for
  stroke
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                     Weed                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/weedDraw
{
  /c exch def

  c (F) eq
  { len 0 rlineto } if

  c (-) eq
  { -25 rotate } if

  c (+) eq
  { 25 rotate } if

  c ([) eq
  {
    currentpoint
    gsave
    stroke
    moveto
  } if

  c (]) eq
  {
    grestore
  } if
} def

/weedRules
{
  /c exch def
  c (X) eq
  {
    (X)(F)(])(X)(-)([)(])(X)(+)([)(F)
  10 inc
  size 11 roll
} if

c (F) eq
{
  (F)(F)
  1 inc
  size 2 roll
} if

c (-) eq
  { (-) size 1 roll } if

  c (+) eq
{ (+) size 1 roll } if

c ([) eq
  { ([) size 1 roll } if

c (]) eq
  { (]) size 1 roll } if

} def

/weed
{
  /len exch def
  /a exch def
  /it exch def
  (X)
  1 inc
  0 1 it 
  {
    pop
    0 1 size 1 sub { pop weedRules } for
  } for 

  0 1 size 1 sub
  {
    pop
    weedDraw
  } for
  stroke
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                Fractal Plant                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fractalPlantDraw
{
  /c exch def

  c (F) eq
  { len 0 rlineto } if

  c (-) eq
  { a neg rotate } if

  c (+) eq
  { a rotate } if

  c ([) eq
  {
    currentpoint
    gsave
    stroke
    moveto
  } if

  c (]) eq
  {
    grestore
  } if
} def

/fractalPlantRules
{
  /c exch def
  c (X) eq
  {
    (X)(F)(+)(])(X)(-)([)(F)(])(X)([)(])(X)(-)([)(F)
  15 inc
  size 16 roll
} if

c (F) eq
{
  (F)(F)
  1 inc
  size 2 roll
} if

c (-) eq
  { (-) size 1 roll } if

  c (+) eq
{ (+) size 1 roll } if

c ([) eq
  { ([) size 1 roll } if

c (]) eq
  { (]) size 1 roll } if

} def

/fractalPlant
{
  /len exch def
  /a exch def
  /it exch def
  (X)
  1 inc
  0 1 it 
  {
    pop
    0 1 size 1 sub { pop fractalPlantRules } for
} for 

0 1 size 1 sub
{
  pop
  fractalPlantDraw
} for
stroke
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                 Binary Tree                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/binaryDraw
{
  /c exch def

  c (0) eq
  { len 0 rlineto stroke} if

  c (1) eq
  { len 0 rlineto } if

  c ([) eq
  {
    currentpoint
    gsave
    stroke
    moveto
    a rotate
  } if

  c (]) eq
  {
    grestore
    a neg rotate
  } if
} def

/binaryRules
{
  /c exch def
  c (0) eq
  {
    (0)(])(0)([)(1)
  4 inc
  size 5 roll
} if

c (1) eq
{
  (1)(1)
  1 inc
  size 2 roll
} if

c ([) eq
  { ([) size 1 roll } if

c (]) eq
  { (]) size 1 roll } if

} def

/binary
{
  /len exch def
  /a exch def
  /it exch def
  (0)
  1 inc
  0 1 it 
  {
    pop
    0 1 size 1 sub { pop binaryRules } for
  } for 

  0 1 size 1 sub
  {
    pop
    binaryDraw
  } for
stroke
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                   FRACTALS                                  %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/Koch {
  %Koch Curve
  /size 0 def
  newpath
  0 0 moveto
  0 rotate
  %Iterations Linesize
  4 .035 inch koch
  closepath
} def

/Sierpinski {
  %Sierpinski Triangle Curve
  /size 0 def
  newpath
  1 inch 1 inch moveto
  60 rotate
  % Iteration Linesize
  6 .05 inch sierpinski
  closepath
} def

/Weed {
  %Fractal Plant
  /size 0 def
  newpath
  6.15 inch 1 inch moveto
  90 rotate
  % Iteration Angle Linesize
  5 25 .07 inch weed
} def

/FractalPlant {
  %Fractal Plant
  /size 0 def
  90 rotate
  newpath
  .5 inch -4.5 inch moveto
  % Iteration Linesize
  4 .05 inch fractalPlant
} def

/FractalPlant2 {
  %Fractal Plant
  /size 0 def
  newpath
  4.5 inch .5 inch moveto
  % Iteration Angle Linesize
  4 25 .1 inch fractalPlant2
} def

/Binary {
  %Binary Tree
  /size 0 def
  90 rotate
  newpath
  1 inch -2.35 inch moveto
  % Iteration Angle Linesize
  8 30 .01 inch binary
} def

8 col 101 col 0 col setrgbcolor
Koch
%Sierpinski
grestore
176 col 128 col 0 col setrgbcolor
Weed
grestore
%FractalPlant
86 col 176 col 0 col setrgbcolor
Binary

showpage
